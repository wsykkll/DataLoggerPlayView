/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __METPublicRTKEvent_Lcm_hpp__
#define __METPublicRTKEvent_Lcm_hpp__

#include <lcm/lcm_coretypes.h>

#include "HEADER.hpp"
#include "HEADER.hpp"
#include "HEADER.hpp"
#include "uint8_t.hpp"
#include "uint8_t.hpp"
#include "uint8_t.hpp"
#include "uint8_t.hpp"
#include "uint8_t.hpp"
#include "uint8_t.hpp"
#include "uint8_t.hpp"
#include "uint8_t.hpp"


class METPublicRTKEvent_Lcm
{
    public:
        HEADER     GGAheader;

        HEADER     RMCheader;

        HEADER     TRAheader;

        double     GGA_dwUtc;

        double     GGA_dwLat;

        uint8_t    GGA_cLatdir;

        double     GGA_dwLon;

        uint8_t    GGA_cLondir;

        int64_t    GGA_nQF;

        int64_t    GGA_nSatNo;

        double     GGA_dwHdop;

        double     GGA_dwAlt;

        uint8_t    GGA_cAUnits;

        int64_t    GGA_nAge;

        int64_t    GGA_nStnID;

        double     RMC_dwUtc;

        uint8_t    RMC_cPosStatus;

        double     RMC_dwLat;

        uint8_t    RMC_cLatDir;

        double     RMC_dwLon;

        uint8_t    RMC_cLonDir;

        double     RMC_dwSpeedIn;

        double     RMC_dwTrackTrue;

        int64_t    RMC_nDate;

        double     RMC_dwMagVar;

        uint8_t    RMC_cVarDir;

        uint8_t    RMC_cModeInd;

        double     TRA_dwUtc;

        double     TRA_dwHeading;

        double     TRA_dwPitch;

        int64_t    TRA_nRoll;

        int64_t    TRA_nQF;

        int64_t    TRA_nSatNo;

        double     TRA_dwAge;

        int64_t    TRA_nStnID;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "METPublicRTKEvent_Lcm"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int METPublicRTKEvent_Lcm::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int METPublicRTKEvent_Lcm::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int METPublicRTKEvent_Lcm::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t METPublicRTKEvent_Lcm::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* METPublicRTKEvent_Lcm::getTypeName()
{
    return "METPublicRTKEvent_Lcm";
}

int METPublicRTKEvent_Lcm::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = this->GGAheader._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->RMCheader._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->TRAheader._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->GGA_dwUtc, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->GGA_dwLat, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->GGA_cLatdir._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->GGA_dwLon, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->GGA_cLondir._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->GGA_nQF, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->GGA_nSatNo, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->GGA_dwHdop, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->GGA_dwAlt, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->GGA_cAUnits._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->GGA_nAge, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->GGA_nStnID, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->RMC_dwUtc, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->RMC_cPosStatus._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->RMC_dwLat, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->RMC_cLatDir._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->RMC_dwLon, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->RMC_cLonDir._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->RMC_dwSpeedIn, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->RMC_dwTrackTrue, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->RMC_nDate, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->RMC_dwMagVar, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->RMC_cVarDir._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->RMC_cModeInd._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->TRA_dwUtc, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->TRA_dwHeading, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->TRA_dwPitch, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->TRA_nRoll, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->TRA_nQF, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->TRA_nSatNo, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->TRA_dwAge, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->TRA_nStnID, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int METPublicRTKEvent_Lcm::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = this->GGAheader._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->RMCheader._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->TRAheader._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->GGA_dwUtc, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->GGA_dwLat, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->GGA_cLatdir._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->GGA_dwLon, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->GGA_cLondir._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->GGA_nQF, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->GGA_nSatNo, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->GGA_dwHdop, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->GGA_dwAlt, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->GGA_cAUnits._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->GGA_nAge, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->GGA_nStnID, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->RMC_dwUtc, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->RMC_cPosStatus._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->RMC_dwLat, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->RMC_cLatDir._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->RMC_dwLon, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->RMC_cLonDir._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->RMC_dwSpeedIn, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->RMC_dwTrackTrue, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->RMC_nDate, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->RMC_dwMagVar, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->RMC_cVarDir._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->RMC_cModeInd._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->TRA_dwUtc, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->TRA_dwHeading, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->TRA_dwPitch, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->TRA_nRoll, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->TRA_nQF, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->TRA_nSatNo, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->TRA_dwAge, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->TRA_nStnID, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int METPublicRTKEvent_Lcm::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += this->GGAheader._getEncodedSizeNoHash();
    enc_size += this->RMCheader._getEncodedSizeNoHash();
    enc_size += this->TRAheader._getEncodedSizeNoHash();
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += this->GGA_cLatdir._getEncodedSizeNoHash();
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += this->GGA_cLondir._getEncodedSizeNoHash();
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += this->GGA_cAUnits._getEncodedSizeNoHash();
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += this->RMC_cPosStatus._getEncodedSizeNoHash();
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += this->RMC_cLatDir._getEncodedSizeNoHash();
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += this->RMC_cLonDir._getEncodedSizeNoHash();
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += this->RMC_cVarDir._getEncodedSizeNoHash();
    enc_size += this->RMC_cModeInd._getEncodedSizeNoHash();
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t METPublicRTKEvent_Lcm::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == METPublicRTKEvent_Lcm::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, METPublicRTKEvent_Lcm::getHash };

    uint64_t hash = 0x3b0134ea35041e6cLL +
         HEADER::_computeHash(&cp) +
         HEADER::_computeHash(&cp) +
         HEADER::_computeHash(&cp) +
         uint8_t::_computeHash(&cp) +
         uint8_t::_computeHash(&cp) +
         uint8_t::_computeHash(&cp) +
         uint8_t::_computeHash(&cp) +
         uint8_t::_computeHash(&cp) +
         uint8_t::_computeHash(&cp) +
         uint8_t::_computeHash(&cp) +
         uint8_t::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
